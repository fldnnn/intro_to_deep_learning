# -*- coding: utf-8 -*-
"""CNN_digit_recognition_mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c2Xjd7eadh3V0DRO9YnjfJG-XnJdSVV5
"""

from google.colab import drive
drive.mount('/content/drive/')

from tensorflow.python.client import device_lib
device_lib.list_local_devices()

import os
os.chdir('/content/drive/My Drive/Evrisimli_Sinir_Aglari/')

!ls

!pip install -q keras

from __future__ import print_function
import keras
from keras.datasets import mnist
from keras.models import load_model
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras. layers import Conv2D, MaxPooling2D
from keras import backend as K

import matplotlib.pyplot as plt

(x_train, y_train), (x_test, y_test) = mnist.load_data()

plt.figure(figsize=(14,14))
x, y = 10, 4 
for i in range(40):  #rastgele secme yerlestirme islemi
    plt.subplot(y, x, i+1)
    plt.imshow(x_train[i])
plt.show()

batch_size = 128 
num_classes = 10 
epochs = 6 # 12 epoch önerilir

img_rows, img_cols = 28, 28


if K.image_data_format() == 'channels_first':
    x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)
    x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)
    input_shape = (1, img_rows, img_cols)
else:
    x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)
    x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)
    input_shape = (img_rows, img_cols, 1)

y_train = keras.utils.to_categorical(y_train, num_classes) #encoding
y_test = keras.utils.to_categorical(y_test, num_classes)

#model olusturma

model = Sequential()

#katmanların olusturulmasi, ilk 32 adet filtreli 3 3 boyutlu
model.add(Conv2D(32, kernel_size=(3, 3),
                 activation='relu',
                 input_shape=input_shape))

 
model.add(Conv2D(64, (3, 3), activation='relu')) #evrisim katmani eklenir

model.add(MaxPooling2D(pool_size=(2, 2))) 

model.add(Dropout(0.25)) #overfitting in onlenmesi

model.add(Flatten()) #fullyconnect

model.add(Dense(128, activation='relu')) #

model.add(Dropout(0.5)) #kalanın yarısı elenir

model.add(Dense(num_classes, activation='softmax')) #cıkıs katmanlarının sınıflarının sayısı kadar softmax fonk.actıvasyon olarak eklenir

model.summary()

model.compile(loss = keras.losses.categorical_crossentropy,
             optimizer = keras.optimizers.Adadelta(),
             metrics = ['accuracy'])

#egitim islemleri
model.fit(x_train, y_train,
          batch_size=batch_size,
          epochs=epochs,
          verbose=1,
          validation_data=(x_test, y_test))

model.save('save_models/mnist_model.h5') #tekrar egitim yapmadan dosyaya ulasmak icin

score = model.evaluate(x_test, y_test, verbose=0)
print('Test Loss:', score[0])
print('Test Accuracy:', score[1])

model_test = model.save('save_models/mnist_model.h5')

test_image = x_test[32] #rastgele deger icin test islemi, 1 atadıgı degerı secmis olur
y_test[32]

plt.imshow(test_image.reshape(28,28))

test_data = x_test[32].reshape(1,28,28,1)
pre=model.predict(test_data, batch_size=1)

preds = model.predict_classes(test_data)
prob = model.predict_proba(test_data)
print(preds, prob)

